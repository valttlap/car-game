CREATE EXTENSION IF NOT EXISTS postgis;
CREATE SCHEMA IF NOT EXISTS car_game;

CREATE TABLE IF NOT EXISTS car_game.plates
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country TEXT NOT NULL,
    country_abbreviation TEXT,
    diplomat_code INT,
    is_diplomat BOOLEAN NOT NULL DEFAULT FALSE,
    CHECK (
        (is_diplomat AND diplomat_code IS NOT NULL AND country_abbreviation IS NULL)
        OR
        (NOT is_diplomat AND country_abbreviation IS NOT NULL AND diplomat_code IS NULL)
    )
);

CREATE OR REPLACE FUNCTION car_game.sighting_exists(p_plate_id INT, p_diplomat_number INT)
RETURNS BOOLEAN
AS $$
DECLARE
    v_is_diplomat BOOLEAN := (SELECT is_diplomat FROM car_game.plates WHERE id = p_plate_id);
BEGIN
    IF v_is_diplomat THEN
        RETURN EXISTS(SELECT 1 FROM car_game.sightings WHERE plate_id = p_plate_id AND diplomat_number = p_diplomat_number);
    END IF;
    RETURN EXISTS(SELECT 1 FROM car_game.sightings WHERE plate_id = p_plate_id);
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS car_game.sightings
(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    plate_id INT NOT NULL,
    date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    is_diplomat BOOLEAN NOT NULL DEFAULT FALSE,
    diplomat_number INT,
    "location" geometry(Point,3067) NOT NULL,
    FOREIGN KEY (plate_id)
        REFERENCES car_game.plates (id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CHECK (NOT is_diplomat OR (diplomat_number IS NOT NULL AND diplomat_number BETWEEN 1 AND 99)),
    CHECK (car_game.sighting_exists(plate_id, diplomat_number) = FALSE)
);


